Check if the Token is Being Sent:

Open your browser's developer tools (usually by pressing F12 or right-clicking and selecting "Inspect").
Go to the "Network" tab.
Perform the request to /api/user/emp and check if the request header includes the Authorization header with the token.
Ensure the Token is Being Set in the Cookies:

Check your login logic in the frontend (loginUser function). Ensure that after a successful login, the server responds with a token, and your frontend sets this token in the cookies.
Verify the Token on the Server Side:

In your backend, the authenticateUser middleware is responsible for verifying the token and attaching user information to the request. Add some console logs or use a debugger to check if this middleware is working correctly.
Check if the jwt.verify method in authenticateUser is successfully decoding the token and retrieving user information.
Check the authenticateUser Middleware Usage:

Ensure that the authenticateUser middleware is applied to the routes where authentication is required. In your app.js, you are using it as middleware, so it should be applied before routes that require authentication.
Inspect the Request Payload:

Log or inspect the request payload in your server's console. Ensure that the request payload includes the expected data, especially the cookies property, which should contain the access_token.


    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWExMTNkMjQ0NWRlYzgyMzRhMjljZGQiLCJpYXQiOjE3MDUwNjQ4MTYsImV4cCI6MTcwNTA2ODQxNn0.MGgsUnPXFvJsXCUrnCtdD_zslOF4xxIUlisUFFn_5Og"


















Check Server Response:

Confirm that the server is indeed sending the token in the "Set-Cookie" header. You can check this in the network tab of your browser's developer tools when making the login request.
Verify Cookie Name:

Ensure that the cookie name used in your frontend (access_token) matches the one set by the server.
Check Cookie Attributes:

Verify that the Secure and SameSite attributes are set correctly. If your site is served over HTTPS, the Secure attribute should be set. If you're dealing with cross-site requests, set SameSite=None.
Cookie Path:

Check the path attribute of the cookie. If it's too restrictive, the cookie might not be accessible from all parts of your application.
Test in Incognito Mode:

Sometimes, browser extensions or other local configurations can interfere with cookies. Test in incognito or private browsing mode to rule out such issues.
Inspect Headers:

Use the network tab of your browser's developer tools to inspect the headers of the login request. Ensure that the "Set-Cookie" header is present and contains the token.
Cross-Domain Issues:

If your frontend and backend are on different domains, make sure that you are handling CORS (Cross-Origin Resource Sharing) correctly on the server side.
Verify Server Configuration:

Double-check the server-side code that sends the cookie. Ensure that it is correctly setting the cookie with the desired attributes.



User
: 
{_id: "65aca5746fc6f7a77e206e83", username: "zaid", email: "zaidk9620@gmail.com", phone: 9670586803,â€¦}
createdAt
: 
"2024-01-21T05:02:44.798Z"
email
: 
"zaidk9620@gmail.com"
password
: 
"$2b$10$0yDit6PrPl8fEdv7XjL9N.kgoHKvXmeLKGTlFGkTBFYOitItWUZMy"
phone
: 
9670586803
updatedAt
: 
"2024-01-21T05:02:44.798Z"
username
: 
"zaid"
__v
: 
0
_id
: 
"65aca5746fc6f7a77e206e83"
token
: 
"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWFjYTU3NDZmYzZmN2E3N2UyMDZlODMiLCJpYXQiOjE3MDU4MTMzOTUsImV4cCI6MTcwODQwNTM5NX0.nQvfsfergcGvLbdmHxzdVJdDWzTCVt3_QZQO9cgmTAU"